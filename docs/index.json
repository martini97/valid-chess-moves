[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/app.js",
    "content": "import express from 'express';\nimport path from 'path';\nimport meaningError from 'meaning-error-middleware';\n\nimport * as routes from '@/routes';\nimport * as middlewares from '@/middlewares';\n\nconst app = express();\n\napp.use('/positions', routes.positions);\n\napp.use(meaningError);\napp.use(middlewares.errors);\n\napp.use(express.static(path.join(__dirname, 'client/build')));\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'client/build', 'index.html'));\n});\n\nexport default app;\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/app.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "app",
    "memberof": "src/app.js",
    "static": true,
    "longname": "src/app.js~app",
    "access": "public",
    "export": true,
    "importPath": "valid-chess-moves/src/app.js",
    "importStyle": "app",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/config.js",
    "content": "export default {\n  http: {\n    port: process.env.PORT || '8080',\n  },\n  env: process.env.NODE_ENV || 'development',\n};\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "src/controllers/positions.js",
    "content": "import { BadRequestError } from 'meaning-error';\nimport * as pieces from '@/pieces';\nimport * as presenters from '@/presenters';\nimport * as validators from '@/validators';\n\n/**\n * Controller for the /positions/:piece/:startAt.\n * @param {Object} req - The request object.\n * @param {Object} req.params - The params object.\n * @param {String} req.params.piece - The type of the piece. eg: knight.\n * @param {Object} req.query - The query object.\n * @param {Number} [req.query.moves] - The number of moves to calculate.\n * @param {Object} res - The response object.\n * @throws {BadRequestError} Throws a BadRequestError if the validation of params\n * or query fails.\n */\nexport default (req, res) => {\n  const { params: { piece: pieceName, startAt }, query: { moves = 2 } } = req;\n  const n = Number.parseInt(moves, 10);\n\n  if (!validators.algebraicNotation(startAt)) {\n    throw new BadRequestError(\n      'Invalid algebraic position.',\n      [{\n        field: 'startAt',\n        message: 'startAt is invalid',\n      }],\n    );\n  }\n\n  if (!validators.moves(n)) {\n    throw new BadRequestError(\n      'Invalid number of moves.',\n      [{\n        field: 'moves',\n        message: 'moves is invalid',\n      }],\n    );\n  }\n\n  if (!(pieceName in pieces)) {\n    throw new BadRequestError(\n      `Invalid piece. Valid pieces: ${Object.keys(pieces)}.`,\n      [{\n        field: 'piece',\n        message: 'piece is invalid',\n      }],\n    );\n  }\n\n  const piece = new pieces[pieceName](startAt);\n  const positions = piece.possiblePositionsInNMoves({ n });\n  res.status(200).send(presenters.positions(req, positions));\n};\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/controllers/positions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "positions",
    "memberof": "src/controllers/positions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/controllers/positions.js~positions",
    "access": "public",
    "export": true,
    "importPath": "valid-chess-moves/src/controllers/positions.js",
    "importStyle": "positions",
    "description": "Controller for the /positions/:piece/:startAt.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The request object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req.params",
        "description": "The params object."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "req.params.piece",
        "description": "The type of the piece. eg: knight."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req.query",
        "description": "The query object."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "req.query.moves",
        "description": "The number of moves to calculate."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The response object."
      }
    ],
    "throws": [
      {
        "types": [
          "BadRequestError"
        ],
        "description": "Throws a BadRequestError if the validation of params\nor query fails."
      }
    ],
    "return": null
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "src/helpers/pieces/knight.js",
    "content": "import Piece from './piece';\n\n/**\n * Class representing a Knight piece.\n * @param {AlgebraicNotation} algebraicPosition - The algebraic position of the Knight.\n * @extends {Piece}\n */\nclass Knight extends Piece {\n  /**\n   * @override\n   */\n  rules = [\n    [+2, +1],\n    [+2, -1],\n    [-2, -1],\n    [-2, +1],\n    [+1, +2],\n    [+1, -2],\n    [-1, -2],\n    [-1, +2],\n  ];\n}\n\nexport default Knight;\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/helpers/pieces/knight.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "class",
    "name": "Knight",
    "memberof": "src/helpers/pieces/knight.js",
    "static": true,
    "longname": "src/helpers/pieces/knight.js~Knight",
    "access": "public",
    "export": true,
    "importPath": "valid-chess-moves/src/helpers/pieces/knight.js",
    "importStyle": "Knight",
    "description": "Class representing a Knight piece.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "AlgebraicNotation"
        ],
        "spread": false,
        "optional": false,
        "name": "algebraicPosition",
        "description": "The algebraic position of the Knight."
      }
    ],
    "interface": false,
    "extends": [
      "Piece"
    ]
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "rules",
    "memberof": "src/helpers/pieces/knight.js~Knight",
    "static": false,
    "longname": "src/helpers/pieces/knight.js~Knight#rules",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "override": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/helpers/pieces/piece.js",
    "content": "import { BadRequestError } from 'meaning-error';\n\n/** Class representing a generic chess piece. */\nclass Piece {\n  /**\n   * Create a Piece in the given position.\n   * @param {AlgebraicNotation} algebraicPosition - The position of the piece in algebraic notation.\n   */\n  constructor(algebraicPosition) {\n    /**\n    The algebraic position of the piece.\n    @type AlgebraicNotation\n    */\n    this.algebraicPosition = Piece.validateAlgebraicNotation(algebraicPosition);\n\n    /**\n    The coordinates of the piece.\n    @type Coordinates\n    */\n    this.coordinates = Piece.fromAlgebraic(algebraicPosition);\n  }\n\n  /**\n   * This field defines the overall rules for the movement of a piece,\n   * override it on the specific piece class with the piece rule.\n   * @summary The rules for the piece movement.\n   * @abstract\n   * @type {Coordinates[]}\n   */\n  rules = [];\n\n  /**\n   * Validates if a position is in algebraic notation.\n   * @param {AlgebraicNotation} algebraicPosition - The position of the piece in algebraic notation.\n   * @throws {BadRequestError} Throws a BadRequestError if the given algebraicPosition\n   * is invalid.\n   * @returns {AlgebraicNotation} The validated algebraic notation.\n   */\n  static validateAlgebraicNotation(algebraicPosition) {\n    if (typeof algebraicPosition !== 'string'\n          || !algebraicPosition.toLowerCase().match(/^[a-h][1-8]$/)) {\n      throw new BadRequestError(\n        'Invalid algebraic position',\n        [{ field: 'algebraic', message: 'Param `algebraic` is invalid.' }],\n      );\n    }\n\n    return algebraicPosition.toLowerCase();\n  }\n\n  /**\n   * Converts from algebric notation to coordinates.\n   * @param {AlgebraicNotation} algebraicPosition - The position of the piece in algebraic notation.\n   * @returns {Coordinates} An array in the form [column, row]\n   */\n  static fromAlgebraic(algebraicPosition) {\n    const [column, row] = algebraicPosition.toLowerCase().split('');\n    return [column.charCodeAt(0) - 96, parseInt(row, 10)];\n  }\n\n  /**\n   * Converts from coordinates to algebric notation.\n   * @param {Coordinates} coordinates -  The coordinates of the piece.\n   * @returns {AlgebraicNotation} The position of the piece in algebraic notation.\n   */\n  static toAlgebraic(coordinates) {\n    return `${String.fromCharCode(96 + coordinates[0])}${parseInt(coordinates[1], 10)}`;\n  }\n\n  /**\n   * Checks if a given position is valid or not.\n   * @param {Coordinates} coordinates - The coordinates of the piece.\n   * @returns {Boolean} Whether or not the given position is legal.\n   */\n  static isLegalPosition(coordinates) {\n    return coordinates.length > 0\n      && Math.max(...coordinates) <= 8\n      && Math.min(...coordinates) >= 1;\n  }\n\n  /**\n   * All the possible (legal) movements of a piece.\n   * @private\n   * @param {Coordinates} startAt - Starting position of piece.\n   * @returns {Coordinates[]} - Every possible coordinates that the piece can reach,\n   * it includes coordinates out of the board.\n   */\n  possiblePositions(startAt) { // eslint-disable-line\n    return this.rules\n      .map(rule => [startAt[0] + rule[0], startAt[1] + rule[1]])\n      .filter(position => this.constructor.isLegalPosition(position));\n  }\n\n  /**\n   * All the possible (legal) movements of a piece after n moves.\n   * @param {Object} movesInfo - Object containing the params.\n   * @param {Coordinates} [movesInfo.startAt=this.coordinates] - Starting position of the\n   * piece. Defaults to the position of the current piece.\n   * @param {Integer} [movesInfo.n=1] - Number of moves, where 0 < n < 20.\n   * @param {Coordinates[]} [movesInfo.positions=[]] - Array of positions. Used for recursion.\n   * @throws {BadRequestError} Throws a BadRequestError if the given n is invalid.\n   * @returns {AlgebraicNotation[]} Every possible coordinates that the piece can reach,\n   * it includes coordinates out of the board.\n   */\n  possiblePositionsInNMoves({ startAt = this.coordinates, n = 1, positions = [] } = {}) {\n    if (!Number.isInteger(n) || n < 0 || n > 20) {\n      throw new BadRequestError(\n        'Invalid argument, moves should be an integer 0 < moves < 20',\n        [{ field: 'moves', message: 'Param `moves` is invalid.' }],\n      );\n    }\n\n    if (n === 0) return positions;\n\n    const currentPossiblePositions = this.possiblePositions(startAt);\n\n    if (n === 1) positions.push(...currentPossiblePositions);\n\n    currentPossiblePositions.forEach((position) => {\n      this.possiblePositionsInNMoves({ startAt: position, n: n - 1, positions });\n    });\n\n    return Array.from(new Set(positions.map(position => Piece.toAlgebraic(position))));\n  }\n}\n\nexport default Piece;\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/helpers/pieces/piece.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "Piece",
    "memberof": "src/helpers/pieces/piece.js",
    "static": true,
    "longname": "src/helpers/pieces/piece.js~Piece",
    "access": "public",
    "export": true,
    "importPath": "valid-chess-moves/src/helpers/pieces/piece.js",
    "importStyle": "Piece",
    "description": "Class representing a generic chess piece.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 58,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/helpers/pieces/piece.js~Piece",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/pieces/piece.js~Piece#constructor",
    "access": "public",
    "description": "Create a Piece in the given position.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "AlgebraicNotation"
        ],
        "spread": false,
        "optional": false,
        "name": "algebraicPosition",
        "description": "The position of the piece in algebraic notation."
      }
    ]
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "algebraicPosition",
    "memberof": "src/helpers/pieces/piece.js~Piece",
    "static": false,
    "longname": "src/helpers/pieces/piece.js~Piece#algebraicPosition",
    "access": "public",
    "description": "The algebraic position of the piece.",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "coordinates",
    "memberof": "src/helpers/pieces/piece.js~Piece",
    "static": false,
    "longname": "src/helpers/pieces/piece.js~Piece#coordinates",
    "access": "public",
    "description": "The coordinates of the piece.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "rules",
    "memberof": "src/helpers/pieces/piece.js~Piece",
    "static": false,
    "longname": "src/helpers/pieces/piece.js~Piece#rules",
    "access": "public",
    "description": "This field defines the overall rules for the movement of a piece,\noverride it on the specific piece class with the piece rule.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@summary",
        "tagValue": "The rules for the piece movement."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Coordinates[]"
      ],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "validateAlgebraicNotation",
    "memberof": "src/helpers/pieces/piece.js~Piece",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/pieces/piece.js~Piece.validateAlgebraicNotation",
    "access": "public",
    "description": "Validates if a position is in algebraic notation.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AlgebraicNotation} The validated algebraic notation."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AlgebraicNotation"
        ],
        "spread": false,
        "optional": false,
        "name": "algebraicPosition",
        "description": "The position of the piece in algebraic notation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AlgebraicNotation"
      ],
      "spread": false,
      "description": "The validated algebraic notation."
    },
    "throws": [
      {
        "types": [
          "BadRequestError"
        ],
        "description": "Throws a BadRequestError if the given algebraicPosition\nis invalid."
      }
    ]
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "fromAlgebraic",
    "memberof": "src/helpers/pieces/piece.js~Piece",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/pieces/piece.js~Piece.fromAlgebraic",
    "access": "public",
    "description": "Converts from algebric notation to coordinates.",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Coordinates} An array in the form [column, row]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AlgebraicNotation"
        ],
        "spread": false,
        "optional": false,
        "name": "algebraicPosition",
        "description": "The position of the piece in algebraic notation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Coordinates"
      ],
      "spread": false,
      "description": "An array in the form [column, row]"
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "toAlgebraic",
    "memberof": "src/helpers/pieces/piece.js~Piece",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/pieces/piece.js~Piece.toAlgebraic",
    "access": "public",
    "description": "Converts from coordinates to algebric notation.",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AlgebraicNotation} The position of the piece in algebraic notation."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "coordinates",
        "description": "The coordinates of the piece."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AlgebraicNotation"
      ],
      "spread": false,
      "description": "The position of the piece in algebraic notation."
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "isLegalPosition",
    "memberof": "src/helpers/pieces/piece.js~Piece",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/pieces/piece.js~Piece.isLegalPosition",
    "access": "public",
    "description": "Checks if a given position is valid or not.",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Whether or not the given position is legal."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "coordinates",
        "description": "The coordinates of the piece."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether or not the given position is legal."
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "possiblePositions",
    "memberof": "src/helpers/pieces/piece.js~Piece",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/pieces/piece.js~Piece#possiblePositions",
    "access": "private",
    "description": "All the possible (legal) movements of a piece.",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Coordinates[]} - Every possible coordinates that the piece can reach,\nit includes coordinates out of the board."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "startAt",
        "description": "Starting position of piece."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Coordinates[]"
      ],
      "spread": false,
      "description": "Every possible coordinates that the piece can reach,\nit includes coordinates out of the board."
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "possiblePositionsInNMoves",
    "memberof": "src/helpers/pieces/piece.js~Piece",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/pieces/piece.js~Piece#possiblePositionsInNMoves",
    "access": "public",
    "description": "All the possible (legal) movements of a piece after n moves.",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AlgebraicNotation[]} Every possible coordinates that the piece can reach,\nit includes coordinates out of the board."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "movesInfo",
        "description": "Object containing the params."
      },
      {
        "nullable": null,
        "types": [
          "Coordinates"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this.coordinates",
        "defaultRaw": "this.coordinates",
        "name": "movesInfo.startAt",
        "description": "Starting position of the\npiece. Defaults to the position of the current piece."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "movesInfo.n",
        "description": "Number of moves, where 0 < n < 20."
      },
      {
        "nullable": null,
        "types": [
          "Coordinates[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "movesInfo.positions",
        "description": "Array of positions. Used for recursion."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AlgebraicNotation[]"
      ],
      "spread": false,
      "description": "Every possible coordinates that the piece can reach,\nit includes coordinates out of the board."
    },
    "throws": [
      {
        "types": [
          "BadRequestError"
        ],
        "description": "Throws a BadRequestError if the given n is invalid."
      }
    ]
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/helpers/pieces/types.jsdoc",
    "content": "/**\n * @typedef Coordinates An array containing the coordinates in the form of [column, row].\n * @type {Array}\n * @property {Number} 0 - The column of the position.\n * @property {Number} 1 - The row of the position.\n */\n\n/**\n * @typedef AlgebraicNotation\n * @property {String} - A string representing a coordinates in algebraic notation.\n*/\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/helpers/pieces/types.jsdoc",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "typedef",
    "name": "Coordinates",
    "memberof": "src/helpers/pieces/types.jsdoc",
    "static": true,
    "longname": "src/helpers/pieces/types.jsdoc~Coordinates",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "0",
        "description": "The column of the position."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "1",
        "description": "The row of the position."
      }
    ],
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "Coordinates"
    }
  },
  {
    "__docId__": 70,
    "kind": "typedef",
    "name": "AlgebraicNotation",
    "memberof": "src/helpers/pieces/types.jsdoc",
    "static": true,
    "longname": "src/helpers/pieces/types.jsdoc~AlgebraicNotation",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "A string representing a coordinates in algebraic notation."
      }
    ],
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "AlgebraicNotation"
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/index.js",
    "content": "import app from './app';\nimport config from './config';\n\n/* eslint no-console:0 */\napp.listen(config.http.port, () => console.log(`Listening on ${config.http.port}`));\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/middlewares/errors.js",
    "content": "/**\n * Catches all erros not catched by error-meaning, logs them and return a 500 status.\n * @summary Error logging middleware.\n * @param {Object} err - The error.\n * @param {Object} req - The req.\n * @param {Object} res - The res.\n */\nexport default (err, req, res, next) => { // eslint-disable-line\n  console.error(`${new Date().toISOString()} `, err.stack || err); // eslint-disable-line no-console\n  if (err) res.status(500).send();\n};\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/middlewares/errors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "errors",
    "memberof": "src/middlewares/errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/middlewares/errors.js~errors",
    "access": "public",
    "export": true,
    "importPath": "valid-chess-moves/src/middlewares/errors.js",
    "importStyle": "errors",
    "description": "Catches all erros not catched by error-meaning, logs them and return a 500 status.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@summary",
        "tagValue": "Error logging middleware."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "The error."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The req."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The res."
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/middlewares/index.js",
    "content": "export errors from './errors';\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/middlewares/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/pieces/index.js",
    "content": "export knight from './knight';\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/pieces/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/pieces/knight.js",
    "content": "import Piece from './piece';\n\n/**\n * Class representing a Knight piece.\n * @param {AlgebraicNotation} algebraicPosition - The algebraic position of the Knight.\n * @extends {Piece}\n */\nclass Knight extends Piece {\n  /**\n   * @override\n   */\n  rules = [\n    [+2, +1],\n    [+2, -1],\n    [-2, -1],\n    [-2, +1],\n    [+1, +2],\n    [+1, -2],\n    [-1, -2],\n    [-1, +2],\n  ];\n}\n\nexport default Knight;\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/pieces/knight.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "class",
    "name": "Knight",
    "memberof": "src/pieces/knight.js",
    "static": true,
    "longname": "src/pieces/knight.js~Knight",
    "access": "public",
    "export": true,
    "importPath": "valid-chess-moves/src/pieces/knight.js",
    "importStyle": "Knight",
    "description": "Class representing a Knight piece.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "AlgebraicNotation"
        ],
        "spread": false,
        "optional": false,
        "name": "algebraicPosition",
        "description": "The algebraic position of the Knight."
      }
    ],
    "interface": false,
    "extends": [
      "Piece"
    ]
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "rules",
    "memberof": "src/pieces/knight.js~Knight",
    "static": false,
    "longname": "src/pieces/knight.js~Knight#rules",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "override": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/pieces/piece.js",
    "content": "import * as validators from '@/validators';\n\n/** Class representing a generic chess piece. */\nclass Piece {\n  /**\n   * Create a Piece in the given position.\n   * @param {AlgebraicNotation} algebraicPosition - The position of the piece in algebraic notation.\n   */\n  constructor(algebraicPosition) {\n    /**\n    The algebraic position of the piece.\n    @type AlgebraicNotation\n    */\n    this.algebraicPosition = Piece.validateAlgebraicNotation(algebraicPosition);\n\n    /**\n    The coordinates of the piece.\n    @type Coordinates\n    */\n    this.coordinates = Piece.fromAlgebraic(algebraicPosition);\n  }\n\n  /**\n   * This field defines the overall rules for the movement of a piece,\n   * override it on the specific piece class with the piece rule.\n   * @summary The rules for the piece movement.\n   * @abstract\n   * @type {Coordinates[]}\n   */\n  rules = [];\n\n  /**\n   * Validates if a position is in algebraic notation.\n   * @param {AlgebraicNotation} algebraicPosition - The position of the piece in algebraic notation.\n   * @throws {TypeError} Throws a TypeError if the given algebraicPosition is invalid.\n   * @returns {AlgebraicNotation} The validated algebraic notation.\n   */\n  static validateAlgebraicNotation(algebraicPosition) {\n    if (!validators.algebraicNotation(algebraicPosition)) {\n      throw new TypeError('Invalid algebraic position');\n    }\n    return algebraicPosition.toLowerCase();\n  }\n\n  /**\n   * Converts from algebric notation to coordinates.\n   * @param {AlgebraicNotation} algebraicPosition - The position of the piece in algebraic notation.\n   * @returns {Coordinates} An array in the form [column, row]\n   */\n  static fromAlgebraic(algebraicPosition) {\n    const [column, row] = algebraicPosition.toLowerCase().split('');\n    return [column.charCodeAt(0) - 96, parseInt(row, 10)];\n  }\n\n  /**\n   * Converts from coordinates to algebric notation.\n   * @param {Coordinates} coordinates -  The coordinates of the piece.\n   * @returns {AlgebraicNotation} The position of the piece in algebraic notation.\n   */\n  static toAlgebraic(coordinates) {\n    return `${String.fromCharCode(96 + coordinates[0])}${parseInt(coordinates[1], 10)}`;\n  }\n\n  /**\n   * Checks if a given position is valid or not.\n   * @param {Coordinates} coordinates - The coordinates of the piece.\n   * @returns {Boolean} Whether or not the given position is legal.\n   */\n  static isLegalPosition(coordinates) {\n    return validators.coordinates(coordinates);\n  }\n\n  /**\n   * All the possible (legal) movements of a piece.\n   * @private\n   * @param {Coordinates} startAt - Starting position of piece.\n   * @returns {Coordinates[]} - Every possible coordinates that the piece can reach,\n   * it includes coordinates out of the board.\n   */\n  possiblePositions(startAt) { // eslint-disable-line\n    return this.rules\n      .map(rule => [startAt[0] + rule[0], startAt[1] + rule[1]])\n      .filter(position => this.constructor.isLegalPosition(position));\n  }\n\n  /**\n   * All the possible (legal) movements of a piece after n moves.\n   * @param {Object} movesInfo - Object containing the params.\n   * @param {Coordinates} [movesInfo.startAt=this.coordinates] - Starting position of the\n   * piece. Defaults to the position of the current piece.\n   * @param {Integer} [movesInfo.n=1] - Number of moves, where 0 < n < 20.\n   * @param {Coordinates[]} [movesInfo.positions=[]] - Array of positions. Used for recursion.\n   * @throws {TypeError} Throws a TypeError if the given n is invalid.\n   * @returns {AlgebraicNotation[]} Every possible coordinates that the piece can reach,\n   * it includes coordinates out of the board.\n   */\n  possiblePositionsInNMoves({ startAt = this.coordinates, n = 1, positions = [] } = {}) {\n    if (!validators.moves(n) && n !== 0) {\n      throw new TypeError('Invalid argument, moves should be an integer 0 < moves < 20');\n    }\n\n    if (n === 0) return positions;\n\n    const currentPossiblePositions = this.possiblePositions(startAt);\n\n    if (n === 1) positions.push(...currentPossiblePositions);\n\n    currentPossiblePositions.forEach((position) => {\n      this.possiblePositionsInNMoves({ startAt: position, n: n - 1, positions });\n    });\n\n    return Array.from(new Set(positions.map(position => Piece.toAlgebraic(position))));\n  }\n}\n\nexport default Piece;\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/pieces/piece.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "Piece",
    "memberof": "src/pieces/piece.js",
    "static": true,
    "longname": "src/pieces/piece.js~Piece",
    "access": "public",
    "export": true,
    "importPath": "valid-chess-moves/src/pieces/piece.js",
    "importStyle": "Piece",
    "description": "Class representing a generic chess piece.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 81,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pieces/piece.js~Piece",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pieces/piece.js~Piece#constructor",
    "access": "public",
    "description": "Create a Piece in the given position.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "AlgebraicNotation"
        ],
        "spread": false,
        "optional": false,
        "name": "algebraicPosition",
        "description": "The position of the piece in algebraic notation."
      }
    ]
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "algebraicPosition",
    "memberof": "src/pieces/piece.js~Piece",
    "static": false,
    "longname": "src/pieces/piece.js~Piece#algebraicPosition",
    "access": "public",
    "description": "The algebraic position of the piece.",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "coordinates",
    "memberof": "src/pieces/piece.js~Piece",
    "static": false,
    "longname": "src/pieces/piece.js~Piece#coordinates",
    "access": "public",
    "description": "The coordinates of the piece.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "rules",
    "memberof": "src/pieces/piece.js~Piece",
    "static": false,
    "longname": "src/pieces/piece.js~Piece#rules",
    "access": "public",
    "description": "This field defines the overall rules for the movement of a piece,\noverride it on the specific piece class with the piece rule.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@summary",
        "tagValue": "The rules for the piece movement."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Coordinates[]"
      ],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "validateAlgebraicNotation",
    "memberof": "src/pieces/piece.js~Piece",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pieces/piece.js~Piece.validateAlgebraicNotation",
    "access": "public",
    "description": "Validates if a position is in algebraic notation.",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AlgebraicNotation} The validated algebraic notation."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AlgebraicNotation"
        ],
        "spread": false,
        "optional": false,
        "name": "algebraicPosition",
        "description": "The position of the piece in algebraic notation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AlgebraicNotation"
      ],
      "spread": false,
      "description": "The validated algebraic notation."
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "Throws a TypeError if the given algebraicPosition is invalid."
      }
    ]
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "fromAlgebraic",
    "memberof": "src/pieces/piece.js~Piece",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pieces/piece.js~Piece.fromAlgebraic",
    "access": "public",
    "description": "Converts from algebric notation to coordinates.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Coordinates} An array in the form [column, row]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AlgebraicNotation"
        ],
        "spread": false,
        "optional": false,
        "name": "algebraicPosition",
        "description": "The position of the piece in algebraic notation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Coordinates"
      ],
      "spread": false,
      "description": "An array in the form [column, row]"
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "toAlgebraic",
    "memberof": "src/pieces/piece.js~Piece",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pieces/piece.js~Piece.toAlgebraic",
    "access": "public",
    "description": "Converts from coordinates to algebric notation.",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AlgebraicNotation} The position of the piece in algebraic notation."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "coordinates",
        "description": "The coordinates of the piece."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AlgebraicNotation"
      ],
      "spread": false,
      "description": "The position of the piece in algebraic notation."
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "isLegalPosition",
    "memberof": "src/pieces/piece.js~Piece",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pieces/piece.js~Piece.isLegalPosition",
    "access": "public",
    "description": "Checks if a given position is valid or not.",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Whether or not the given position is legal."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "coordinates",
        "description": "The coordinates of the piece."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether or not the given position is legal."
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "possiblePositions",
    "memberof": "src/pieces/piece.js~Piece",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pieces/piece.js~Piece#possiblePositions",
    "access": "private",
    "description": "All the possible (legal) movements of a piece.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Coordinates[]} - Every possible coordinates that the piece can reach,\nit includes coordinates out of the board."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "startAt",
        "description": "Starting position of piece."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Coordinates[]"
      ],
      "spread": false,
      "description": "Every possible coordinates that the piece can reach,\nit includes coordinates out of the board."
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "possiblePositionsInNMoves",
    "memberof": "src/pieces/piece.js~Piece",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pieces/piece.js~Piece#possiblePositionsInNMoves",
    "access": "public",
    "description": "All the possible (legal) movements of a piece after n moves.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AlgebraicNotation[]} Every possible coordinates that the piece can reach,\nit includes coordinates out of the board."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "movesInfo",
        "description": "Object containing the params."
      },
      {
        "nullable": null,
        "types": [
          "Coordinates"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this.coordinates",
        "defaultRaw": "this.coordinates",
        "name": "movesInfo.startAt",
        "description": "Starting position of the\npiece. Defaults to the position of the current piece."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "movesInfo.n",
        "description": "Number of moves, where 0 < n < 20."
      },
      {
        "nullable": null,
        "types": [
          "Coordinates[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "movesInfo.positions",
        "description": "Array of positions. Used for recursion."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AlgebraicNotation[]"
      ],
      "spread": false,
      "description": "Every possible coordinates that the piece can reach,\nit includes coordinates out of the board."
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "Throws a TypeError if the given n is invalid."
      }
    ]
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/pieces/types.jsdoc",
    "content": "/**\n * @typedef Coordinates An array containing the coordinates in the form of [column, row].\n * @type {Array}\n * @property {Number} 0 - The column of the position.\n * @property {Number} 1 - The row of the position.\n */\n\n/**\n * @typedef AlgebraicNotation\n * @property {String} - A string representing a coordinates in algebraic notation.\n*/\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/pieces/types.jsdoc",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "typedef",
    "name": "Coordinates",
    "memberof": "src/pieces/types.jsdoc",
    "static": true,
    "longname": "src/pieces/types.jsdoc~Coordinates",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "0",
        "description": "The column of the position."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "1",
        "description": "The row of the position."
      }
    ],
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "Coordinates"
    }
  },
  {
    "__docId__": 93,
    "kind": "typedef",
    "name": "AlgebraicNotation",
    "memberof": "src/pieces/types.jsdoc",
    "static": true,
    "longname": "src/pieces/types.jsdoc~AlgebraicNotation",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "A string representing a coordinates in algebraic notation."
      }
    ],
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "AlgebraicNotation"
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/presenters/index.js",
    "content": "export positions from './positions';\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/presenters/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "src/presenters/positions.js",
    "content": "/**\n * Presents the response for the /positions/:piece/:startAt.\n * @param {Object} req - The request object.\n * @param {Object} req.params - The params object.\n * @param {String} req.params.piece - The type of the piece. eg: knight.\n * @param {Object} req.query - The query object.\n * @param {Number} [req.query.moves] - The number of moves to calculate.\n * @param {AlgebraicNotation[]} positions - All the positions that the piece can take in\n * the given moves.\n */\nexport default (req, positions) => ({\n  positions,\n  piece: req.params.piece,\n  moves: Number.parseInt(req.query.moves, 10) || 2,\n});\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/presenters/positions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "positions",
    "memberof": "src/presenters/positions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/presenters/positions.js~positions",
    "access": "public",
    "export": true,
    "importPath": "valid-chess-moves/src/presenters/positions.js",
    "importStyle": "positions",
    "description": "Presents the response for the /positions/:piece/:startAt.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The request object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req.params",
        "description": "The params object."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "req.params.piece",
        "description": "The type of the piece. eg: knight."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req.query",
        "description": "The query object."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "req.query.moves",
        "description": "The number of moves to calculate."
      },
      {
        "nullable": null,
        "types": [
          "AlgebraicNotation[]"
        ],
        "spread": false,
        "optional": false,
        "name": "positions",
        "description": "All the positions that the piece can take in\nthe given moves."
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/routes/index.js",
    "content": "export positions from './positions';\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/routes/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "src/routes/positions.js",
    "content": "import { Router } from 'express';\n\nimport positions from '@/controllers/positions';\n\nconst router = Router();\nrouter.get('/:piece/:startAt', positions);\n\nexport default router;\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/routes/positions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "router",
    "memberof": "src/routes/positions.js",
    "static": true,
    "longname": "src/routes/positions.js~router",
    "access": "public",
    "export": true,
    "importPath": "valid-chess-moves/src/routes/positions.js",
    "importStyle": "router",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/validators/algebraic-notation.js",
    "content": "/**\n * Algebraic notation validator.\n * @param {AlgebraicNotation} algebraicPosition\n * @returns {Boolean} Whether or not the position is valid.\n */\nexport default (algebraicPosition) => {\n  if (typeof algebraicPosition !== 'string'\n    || !algebraicPosition.toLowerCase().match(/^[a-h][1-8]$/)) {\n    return false;\n  }\n  return true;\n};\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/validators/algebraic-notation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "algebraicnotation",
    "memberof": "src/validators/algebraic-notation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators/algebraic-notation.js~algebraicnotation",
    "access": "public",
    "export": true,
    "importPath": "valid-chess-moves/src/validators/algebraic-notation.js",
    "importStyle": "algebraicnotation",
    "description": "Algebraic notation validator.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Whether or not the position is valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AlgebraicNotation"
        ],
        "spread": false,
        "optional": false,
        "name": "algebraicPosition",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether or not the position is valid."
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/validators/coordinates.js",
    "content": "/**\n * Coordinates validator.\n * @param {Coordinates} coordinates\n * @returns {Boolean} Whether or not the position is valid.\n */\nexport default coordinates => coordinates.length === 2\n  && Math.max(...coordinates) <= 8\n  && Math.min(...coordinates) >= 1;\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/validators/coordinates.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "coordinates",
    "memberof": "src/validators/coordinates.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators/coordinates.js~coordinates",
    "access": "public",
    "export": true,
    "importPath": "valid-chess-moves/src/validators/coordinates.js",
    "importStyle": "coordinates",
    "description": "Coordinates validator.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Whether or not the position is valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "coordinates",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether or not the position is valid."
    }
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "src/validators/index.js",
    "content": "export algebraicNotation from './algebraic-notation';\nexport coordinates from './coordinates';\nexport moves from './moves';\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/validators/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/validators/moves.js",
    "content": "/**\n * Moves validator.\n * @param {Number} moves\n * @returns {Boolean} Whether or not the number of moves is valid.\n */\nexport default moves => Number.isInteger(moves) && moves > 0 && moves < 20;\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/src/validators/moves.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "moves",
    "memberof": "src/validators/moves.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validators/moves.js~moves",
    "access": "public",
    "export": true,
    "importPath": "valid-chess-moves/src/validators/moves.js",
    "importStyle": "moves",
    "description": "Moves validator.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Whether or not the number of moves is valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "moves",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether or not the number of moves is valid."
    }
  },
  {
    "kind": "index",
    "content": "# Valid chess moves\n\n[![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n[![Build Status](https://travis-ci.org/martini97/valid-chess-moves.svg?branch=master)](https://travis-ci.org/martini97/valid-chess-moves)\n[![Coverage Status](https://coveralls.io/repos/github/martini97/valid-chess-moves/badge.svg?branch=master)](https://coveralls.io/github/martini97/valid-chess-moves?branch=master)\n[![Docs Coverage Status](/docs/badge.svg)](https://martini97.github.io/valid-chess-moves/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](/CONTRIBUTING.md)\n\n## Running loccaly\n```bash\n$ git clone https://github.com/martini97/valid-chess-moves.git\n$ cd valid-chess-moves\n$ yarn\n$ yarn start\n```\n\n## Documentation\nThis project is currently using jsdoc for documentation, you can check it [here](https://martini97.github.io/valid-chess-moves/).\n",
    "longname": "/home/martini/Projects/valid-chess-moves/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"valid-chess-moves\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Calculates all the possible positions that a chess Knight can take in exactly two moves.\",\n  \"repository\": \"https://github.com/martini97/valid-chess-moves\",\n  \"author\": \"Alessandro Martini <alessandrofmartini@gmail.com>\",\n  \"license\": \"GPL-3.0-only\",\n  \"private\": false,\n  \"scripts\": {\n    \"dev\": \"nodemon server.js\",\n    \"docs:clean\": \"[ ! -e docs ] || rm -rf docs\",\n    \"docs:build\": \"esdoc\",\n    \"docs\": \"yarn run docs:clean && yarn run docs:build\",\n    \"heroku:deploy\": \"cd src/client && yarn install && yarn build\",\n    \"test:coverage\": \"jest --coverage --coverageReporters=text-lcov --testPathIgnorePatterns src/client | coveralls\",\n    \"test:watch\": \"NODE_ENV=test jest --watch --testPathIgnorePatterns src/client\",\n    \"test\": \"NODE_ENV=test jest --testPathIgnorePatterns src/client\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"yarn test\",\n      \"pre-push\": \"yarn test\"\n    }\n  },\n  \"jest\": {\n    \"projects\": [\n      {\n        \"runner\": \"jest-runner-eslint\",\n        \"displayName\": \"lint\",\n        \"testMatch\": [\n          \"<rootDir>/src/**/*.js\"\n        ]\n      },\n      {\n        \"displayName\": \"test\"\n      }\n    ]\n  },\n  \"dependencies\": {\n    \"babel-core\": \"^6.26.3\",\n    \"babel-plugin-root-import\": \"^6.1.0\",\n    \"babel-plugin-transform-class-properties\": \"^6.24.1\",\n    \"babel-plugin-transform-export-extensions\": \"^6.22.0\",\n    \"babel-polyfill\": \"^6.26.0\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"express\": \"^4.16.3\",\n    \"meaning-error\": \"^2.3.0\",\n    \"meaning-error-middleware\": \"^0.1.1\",\n    \"morgan\": \"^1.9.0\"\n  },\n  \"devDependencies\": {\n    \"babel-eslint\": \"8\",\n    \"babel-jest\": \"^23.4.0\",\n    \"coveralls\": \"^3.0.2\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.19.1\",\n    \"eslint-config-airbnb\": \"^17.0.0\",\n    \"eslint-import-resolver-babel-plugin-root-import\": \"^1.1.1\",\n    \"eslint-plugin-babel\": \"^5.1.0\",\n    \"eslint-plugin-import\": \"^2.12.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.0.3\",\n    \"eslint-plugin-react\": \"^7.9.1\",\n    \"husky\": \"^1.0.0-rc.13\",\n    \"jest\": \"^23.4.0\",\n    \"jest-runner-eslint\": \"^0.6.0\",\n    \"jsdoc\": \"~3.5.5\",\n    \"nodemon\": \"^1.18.1\",\n    \"regenerator-runtime\": \"^0.12.0\",\n    \"supertest\": \"^3.1.0\"\n  }\n}\n",
    "longname": "/home/martini/Projects/valid-chess-moves/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 107,
    "kind": "testFile",
    "name": "tests/app.test.js",
    "content": "import request from 'supertest';\nimport app from '@/app';\n\n/**\n * @test {app}\n */\ndescribe('Given the app', () => {\n  describe('When getting a not implemented piece', () => {\n    it('should return an error', async () => {\n      const { body } = await request(app)\n        .get('/positions/king/a1')\n        .expect(400);\n      expect(body).toHaveProperty('error_name', 'BadRequestError');\n      expect(body).toHaveProperty('error_message', 'Invalid piece. Valid pieces: knight.');\n      expect(body).toHaveProperty('status_code', 400);\n      expect(body).toHaveProperty('error');\n      expect(body.error).toHaveLength(1);\n      expect(body.error[0]).toHaveProperty('field', 'piece');\n      expect(body.error[0]).toHaveProperty('message', 'piece is invalid');\n    });\n  });\n\n  describe('When getting a implemented piece', () => {\n    it('should return possible positions', async () => {\n      const { body } = await request(app)\n        .get('/positions/knight/a1')\n        .expect(200);\n      expect(body).toHaveProperty('piece', 'knight');\n      expect(body).toHaveProperty('moves', 2);\n      expect(body).toHaveProperty('positions', [\n        'e3', 'e1', 'a1', 'a3', 'd4', 'b4', 'd2', 'c5', 'c1', 'a5',\n      ]);\n    });\n\n    it('should allow query for n of moves', async () => {\n      const { body } = await request(app)\n        .get('/positions/knight/a1?moves=5')\n        .expect(200);\n      expect(body).toHaveProperty('piece', 'knight');\n      expect(body).toHaveProperty('moves', 5);\n      expect(body).toHaveProperty('positions', [\n        'g4', 'g2', 'c2', 'c4', 'f5', 'f1', 'd1', 'd5',\n        'g6', 'c6', 'f7', 'f3', 'd3', 'd7', 'g8', 'h3',\n        'h1', 'e4', 'h7', 'h5', 'e8', 'e2', 'e6', 'b3',\n        'b5', 'b1', 'a2', 'a6', 'b7', 'c8', 'a4', 'a8',\n      ]);\n    });\n\n    it('should throw an error for invalid position', async () => {\n      const { body } = await request(app)\n        .get('/positions/knight/1a')\n        .expect(400);\n      expect(body).toHaveProperty('error_name', 'BadRequestError');\n      expect(body).toHaveProperty('error_message', 'Invalid algebraic position.');\n      expect(body).toHaveProperty('status_code', 400);\n      expect(body).toHaveProperty('error');\n      expect(body.error).toHaveLength(1);\n      expect(body.error[0]).toHaveProperty('field', 'startAt');\n      expect(body.error[0]).toHaveProperty('message', 'startAt is invalid');\n    });\n\n    it('should throw an error for negative moves', async () => {\n      const { body } = await request(app)\n        .get('/positions/knight/a1?moves=-1')\n        .expect(400);\n      expect(body).toHaveProperty('error_name', 'BadRequestError');\n      expect(body).toHaveProperty('error_message', 'Invalid number of moves.');\n      expect(body).toHaveProperty('status_code', 400);\n      expect(body).toHaveProperty('error');\n      expect(body.error).toHaveLength(1);\n      expect(body.error[0]).toHaveProperty('field', 'moves');\n      expect(body.error[0]).toHaveProperty('message', 'moves is invalid');\n    });\n\n    it('should throw an error for big moves', async () => {\n      const { body } = await request(app)\n        .get('/positions/knight/a1?moves=21')\n        .expect(400);\n      expect(body).toHaveProperty('error_name', 'BadRequestError');\n      expect(body).toHaveProperty('error_message', 'Invalid number of moves.');\n      expect(body).toHaveProperty('status_code', 400);\n      expect(body).toHaveProperty('error');\n      expect(body.error).toHaveLength(1);\n      expect(body.error[0]).toHaveProperty('field', 'moves');\n      expect(body.error[0]).toHaveProperty('message', 'moves is invalid');\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/tests/app.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "tests/app.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/app.test.js~describe0",
    "access": null,
    "description": "Given the app",
    "lineNumber": 7,
    "testTargets": [
      "app"
    ]
  },
  {
    "__docId__": 109,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "tests/app.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/app.test.js~describe0.describe1",
    "access": null,
    "description": "When getting a not implemented piece",
    "lineNumber": 8
  },
  {
    "__docId__": 110,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "tests/app.test.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "tests/app.test.js~describe0.describe1.it2",
    "access": null,
    "description": "should return an error",
    "lineNumber": 9
  },
  {
    "__docId__": 111,
    "kind": "test",
    "name": "describe3",
    "testId": 3,
    "memberof": "tests/app.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/app.test.js~describe0.describe3",
    "access": null,
    "description": "When getting a implemented piece",
    "lineNumber": 23
  },
  {
    "__docId__": 112,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "tests/app.test.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "tests/app.test.js~describe0.describe3.it4",
    "access": null,
    "description": "should return possible positions",
    "lineNumber": 24
  },
  {
    "__docId__": 113,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "tests/app.test.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "tests/app.test.js~describe0.describe3.it5",
    "access": null,
    "description": "should allow query for n of moves",
    "lineNumber": 35
  },
  {
    "__docId__": 114,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "tests/app.test.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "tests/app.test.js~describe0.describe3.it6",
    "access": null,
    "description": "should throw an error for invalid position",
    "lineNumber": 49
  },
  {
    "__docId__": 115,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "tests/app.test.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "tests/app.test.js~describe0.describe3.it7",
    "access": null,
    "description": "should throw an error for negative moves",
    "lineNumber": 62
  },
  {
    "__docId__": 116,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "tests/app.test.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "tests/app.test.js~describe0.describe3.it8",
    "access": null,
    "description": "should throw an error for big moves",
    "lineNumber": 75
  },
  {
    "__docId__": 117,
    "kind": "testFile",
    "name": "tests/helpers/pieces/knight.test.js",
    "content": "import Knight from '@/helpers/pieces/knight';\nimport allKinghtsPositions from '../../fixtures/pieces/knight/1-moves.json';\nimport allKinghtsPositionsIn2Moves from '../../fixtures/pieces/knight/2-moves.json';\n\n/**\n * @test {Knight}\n */\ndescribe('Given a Knight', () => {\n  function testPossiblePositions(startAt, validPositions) {\n    /**\n     * @test {Knight#possiblePositionsInNMoves}\n     */\n    it('should return all valid positions', () => {\n      const knight = new Knight(startAt);\n      const possiblePositions = knight.possiblePositionsInNMoves();\n      expect(possiblePositions.length).toEqual(validPositions.length);\n      possiblePositions.forEach((position) => {\n        expect(validPositions).toContain(position);\n      });\n    });\n  }\n\n  function testPossiblePositionsIn2Moves(startAt, validPositions) {\n    /**\n     * @test {Knight#possiblePositionsInNMoves}\n     */\n    it('should return all valid positions for it in 2 moves', () => {\n      validPositions = Array.from(new Set(validPositions)); // eslint-disable-line\n      const knight = new Knight(startAt);\n      const possiblePositions = knight.possiblePositionsInNMoves({ n: 2 });\n      expect(possiblePositions.length).toEqual(validPositions.length);\n      possiblePositions.forEach((position) => {\n        expect(validPositions).toContain(position);\n      });\n    });\n  }\n\n  Object.entries(allKinghtsPositions)\n    .forEach(entry => testPossiblePositions(...entry));\n  Object.entries(allKinghtsPositionsIn2Moves)\n    .forEach(entry => testPossiblePositionsIn2Moves(...entry));\n});\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/tests/helpers/pieces/knight.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "tests/helpers/pieces/knight.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/helpers/pieces/knight.test.js~describe9",
    "access": null,
    "description": "Given a Knight",
    "lineNumber": 8,
    "testTargets": [
      "Knight"
    ]
  },
  {
    "__docId__": 119,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "tests/helpers/pieces/knight.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/helpers/pieces/knight.test.js~describe9.it10",
    "access": null,
    "description": "should return all valid positions",
    "lineNumber": 13,
    "testTargets": [
      "Knight#possiblePositionsInNMoves"
    ]
  },
  {
    "__docId__": 120,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "tests/helpers/pieces/knight.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/helpers/pieces/knight.test.js~describe9.it11",
    "access": null,
    "description": "should return all valid positions for it in 2 moves",
    "lineNumber": 27,
    "testTargets": [
      "Knight#possiblePositionsInNMoves"
    ]
  },
  {
    "__docId__": 121,
    "kind": "testFile",
    "name": "tests/helpers/pieces/piece.test.js",
    "content": "import Piece from '@/helpers/pieces/piece';\nimport allPositions from '../../fixtures/pieces/all-positions.json';\n\n/**\n * @test {Piece}\n */\ndescribe('Given a Piece', () => {\n  /**\n   * @test {Piece#rules}\n   */\n  it('should have no rules', () => {\n    const piece = new Piece('A1');\n    expect(piece.rules.length).toEqual(0);\n  });\n\n  /**\n   * @test {Piece#possiblePositions}\n   */\n  it('should not be able to move', () => {\n    const piece = new Piece('A1');\n    expect(piece.possiblePositions().length).toEqual(0);\n  });\n\n  /**\n   * @test {Piece#possiblePositionsInNMoves}\n   */\n  it('next N moves should always return [] for N > 0', () => {\n    const piece = new Piece('A1');\n    [...Array(20)].map((_, n) => expect(piece.possiblePositionsInNMoves({ n }).length)\n      .toEqual(0));\n  });\n\n  describe('next N moves should throw an error for invalid N', () => {\n    function shouldThrowAnError(piece, n) {\n      /**\n       * @test {Piece#possiblePositionsInNMoves}\n       */\n      it(`N = ${n}`, () => {\n        expect(() => piece.possiblePositionsInNMoves({ n }))\n          .toThrowError('Invalid argument, moves should be an integer 0 < moves < 20');\n      });\n    }\n\n    const piece = new Piece('A1');\n    shouldThrowAnError(piece, -1);\n    shouldThrowAnError(piece, 2.5);\n    shouldThrowAnError(piece, 21);\n    shouldThrowAnError(piece, Math.PI);\n    shouldThrowAnError(piece, -Math.PI);\n    shouldThrowAnError(piece, Infinity);\n    shouldThrowAnError(piece, -Infinity);\n  });\n  describe('initiated with an invalid algebraic position', () => {\n    function shouldThrowAnError(algebraic) {\n      /**\n       * @test {Piece.validateAlgebraicNotation}\n       */\n      it(`should throw an error [${algebraic}]`, () => {\n        expect(() => new Piece(algebraic)).toThrowError('Invalid algebraic position');\n      });\n    }\n\n    shouldThrowAnError('8h');\n    shouldThrowAnError([1, 1]);\n    shouldThrowAnError('invalid algebraic position');\n    shouldThrowAnError('i1');\n    shouldThrowAnError('h9');\n    shouldThrowAnError(8);\n    shouldThrowAnError({ column: 'A', row: 8 });\n  });\n\n  describe('initiated with a valid algebraic position', () => {\n    function shouldSetCorrectCoordinates(algebraic, expected) {\n      /**\n       * @test {Piece#coordinates}\n       * @test {Piece#algebraicPosition}\n       */\n      it(`should set correct coordinates [${algebraic} => ${expected}]`, () => {\n        const piece = new Piece(algebraic);\n        expect(piece.coordinates).toEqual(expected);\n        expect(piece.algebraicPosition).toEqual(algebraic.toLowerCase());\n      });\n    }\n\n    function shouldGetCorrectAlgebraic(expected, coordinates) {\n      /**\n       * @test {Piece.toAlgebraic}\n       */\n      it(`should get correct algebraic [${coordinates} => ${expected}]`, () => {\n        expect(Piece.toAlgebraic(coordinates))\n          .toEqual(expected.toLowerCase());\n      });\n    }\n\n    allPositions.forEach(testData => shouldSetCorrectCoordinates(...testData));\n    allPositions.forEach(testData => shouldGetCorrectAlgebraic(...testData));\n  });\n\n  describe('testing for legal positions', () => {\n    function shouldValidateLegalPosition(pos, expected) {\n      /**\n       * @test {Piece.isLegalPosition}\n       */\n      it(`should consider ${pos} ${expected ? 'legal' : 'ilegal'}`, () => {\n        expect(Piece.isLegalPosition(pos)).toEqual(expected);\n      });\n    }\n    const legalMoves = [];\n    for (let i = 1; i <= 8; i++) {\n      for (let j = 1; j <= 8; j++) {\n        legalMoves.push([i, j]);\n      }\n    }\n\n    legalMoves.forEach(pos => shouldValidateLegalPosition(pos, true));\n    shouldValidateLegalPosition([-1, 2], false);\n    shouldValidateLegalPosition([1, -2], false);\n    shouldValidateLegalPosition([10, 2], false);\n    shouldValidateLegalPosition([1, 20], false);\n    shouldValidateLegalPosition([-1, 20], false);\n    shouldValidateLegalPosition([-10, -2], false);\n    shouldValidateLegalPosition('wrong parameter', false);\n    shouldValidateLegalPosition({}, false);\n    shouldValidateLegalPosition(2, false);\n  });\n});\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/tests/helpers/pieces/piece.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "tests/helpers/pieces/piece.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/helpers/pieces/piece.test.js~describe12",
    "access": null,
    "description": "Given a Piece",
    "lineNumber": 7,
    "testTargets": [
      "Piece"
    ]
  },
  {
    "__docId__": 123,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "tests/helpers/pieces/piece.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "tests/helpers/pieces/piece.test.js~describe12.it13",
    "access": null,
    "description": "should have no rules",
    "lineNumber": 11,
    "testTargets": [
      "Piece#rules"
    ]
  },
  {
    "__docId__": 124,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "tests/helpers/pieces/piece.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "tests/helpers/pieces/piece.test.js~describe12.it14",
    "access": null,
    "description": "should not be able to move",
    "lineNumber": 19,
    "testTargets": [
      "Piece#possiblePositions"
    ]
  },
  {
    "__docId__": 125,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "tests/helpers/pieces/piece.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "tests/helpers/pieces/piece.test.js~describe12.it15",
    "access": null,
    "description": "next N moves should always return [] for N > 0",
    "lineNumber": 27,
    "testTargets": [
      "Piece#possiblePositionsInNMoves"
    ]
  },
  {
    "__docId__": 126,
    "kind": "test",
    "name": "describe16",
    "testId": 16,
    "memberof": "tests/helpers/pieces/piece.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "tests/helpers/pieces/piece.test.js~describe12.describe16",
    "access": null,
    "description": "next N moves should throw an error for invalid N",
    "lineNumber": 33
  },
  {
    "__docId__": 127,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "tests/helpers/pieces/piece.test.js~describe12.describe16",
    "testDepth": 2,
    "static": true,
    "longname": "tests/helpers/pieces/piece.test.js~describe12.describe16.it17",
    "access": null,
    "lineNumber": 38,
    "testTargets": [
      "Piece#possiblePositionsInNMoves"
    ]
  },
  {
    "__docId__": 128,
    "kind": "test",
    "name": "describe18",
    "testId": 18,
    "memberof": "tests/helpers/pieces/piece.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "tests/helpers/pieces/piece.test.js~describe12.describe18",
    "access": null,
    "description": "initiated with an invalid algebraic position",
    "lineNumber": 53
  },
  {
    "__docId__": 129,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "tests/helpers/pieces/piece.test.js~describe12.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "tests/helpers/pieces/piece.test.js~describe12.describe18.it19",
    "access": null,
    "lineNumber": 58,
    "testTargets": [
      "Piece.validateAlgebraicNotation"
    ]
  },
  {
    "__docId__": 130,
    "kind": "test",
    "name": "describe20",
    "testId": 20,
    "memberof": "tests/helpers/pieces/piece.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "tests/helpers/pieces/piece.test.js~describe12.describe20",
    "access": null,
    "description": "initiated with a valid algebraic position",
    "lineNumber": 72
  },
  {
    "__docId__": 131,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "tests/helpers/pieces/piece.test.js~describe12.describe20",
    "testDepth": 2,
    "static": true,
    "longname": "tests/helpers/pieces/piece.test.js~describe12.describe20.it21",
    "access": null,
    "lineNumber": 78,
    "testTargets": [
      "Piece#coordinates",
      "Piece#algebraicPosition"
    ]
  },
  {
    "__docId__": 132,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "tests/helpers/pieces/piece.test.js~describe12.describe20",
    "testDepth": 2,
    "static": true,
    "longname": "tests/helpers/pieces/piece.test.js~describe12.describe20.it22",
    "access": null,
    "lineNumber": 89,
    "testTargets": [
      "Piece.toAlgebraic"
    ]
  },
  {
    "__docId__": 133,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "tests/helpers/pieces/piece.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "tests/helpers/pieces/piece.test.js~describe12.describe23",
    "access": null,
    "description": "testing for legal positions",
    "lineNumber": 99
  },
  {
    "__docId__": 134,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "tests/helpers/pieces/piece.test.js~describe12.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "tests/helpers/pieces/piece.test.js~describe12.describe23.it24",
    "access": null,
    "lineNumber": 104,
    "testTargets": [
      "Piece.isLegalPosition"
    ]
  },
  {
    "__docId__": 135,
    "kind": "testFile",
    "name": "tests/pieces/knight.test.js",
    "content": "import Knight from '@/pieces/knight';\nimport allKinghtsPositions from '../fixtures/pieces/knight/1-moves.json';\nimport allKinghtsPositionsIn2Moves from '../fixtures/pieces/knight/2-moves.json';\n\n/**\n * @test {Knight}\n */\ndescribe('Given a Knight', () => {\n  function testPossiblePositions(startAt, validPositions) {\n    /**\n     * @test {Knight#possiblePositionsInNMoves}\n     */\n    it('should return all valid positions', () => {\n      const knight = new Knight(startAt);\n      const possiblePositions = knight.possiblePositionsInNMoves();\n      expect(possiblePositions.length).toEqual(validPositions.length);\n      possiblePositions.forEach((position) => {\n        expect(validPositions).toContain(position);\n      });\n    });\n  }\n\n  function testPossiblePositionsIn2Moves(startAt, validPositions) {\n    /**\n     * @test {Knight#possiblePositionsInNMoves}\n     */\n    it('should return all valid positions for it in 2 moves', () => {\n      validPositions = Array.from(new Set(validPositions)); // eslint-disable-line\n      const knight = new Knight(startAt);\n      const possiblePositions = knight.possiblePositionsInNMoves({ n: 2 });\n      expect(possiblePositions.length).toEqual(validPositions.length);\n      possiblePositions.forEach((position) => {\n        expect(validPositions).toContain(position);\n      });\n    });\n  }\n\n  Object.entries(allKinghtsPositions)\n    .forEach(entry => testPossiblePositions(...entry));\n  Object.entries(allKinghtsPositionsIn2Moves)\n    .forEach(entry => testPossiblePositionsIn2Moves(...entry));\n});\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/tests/pieces/knight.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "tests/pieces/knight.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/pieces/knight.test.js~describe25",
    "access": null,
    "description": "Given a Knight",
    "lineNumber": 8,
    "testTargets": [
      "Knight"
    ]
  },
  {
    "__docId__": 137,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "tests/pieces/knight.test.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "tests/pieces/knight.test.js~describe25.it26",
    "access": null,
    "description": "should return all valid positions",
    "lineNumber": 13,
    "testTargets": [
      "Knight#possiblePositionsInNMoves"
    ]
  },
  {
    "__docId__": 138,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "tests/pieces/knight.test.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "tests/pieces/knight.test.js~describe25.it27",
    "access": null,
    "description": "should return all valid positions for it in 2 moves",
    "lineNumber": 27,
    "testTargets": [
      "Knight#possiblePositionsInNMoves"
    ]
  },
  {
    "__docId__": 139,
    "kind": "testFile",
    "name": "tests/pieces/piece.test.js",
    "content": "import Piece from '@/pieces/piece';\nimport allPositions from '../fixtures/pieces/all-positions.json';\n\n/**\n * @test {Piece}\n */\ndescribe('Given a Piece', () => {\n  /**\n   * @test {Piece#rules}\n   */\n  it('should have no rules', () => {\n    const piece = new Piece('A1');\n    expect(piece.rules.length).toEqual(0);\n  });\n\n  /**\n   * @test {Piece#possiblePositions}\n   */\n  it('should not be able to move', () => {\n    const piece = new Piece('A1');\n    expect(piece.possiblePositions().length).toEqual(0);\n  });\n\n  /**\n   * @test {Piece#possiblePositionsInNMoves}\n   */\n  it('next N moves should always return [] for N > 0', () => {\n    const piece = new Piece('A1');\n    [...Array(19)].map((_, n) => expect(piece.possiblePositionsInNMoves({ n: n + 1 }).length)\n      .toEqual(0));\n  });\n\n  describe('next N moves should throw an error for invalid N', () => {\n    function shouldThrowAnError(piece, n) {\n      /**\n       * @test {Piece#possiblePositionsInNMoves}\n       */\n      it(`N = ${n}`, () => {\n        expect(() => piece.possiblePositionsInNMoves({ n }))\n          .toThrowError(TypeError);\n      });\n    }\n\n    const piece = new Piece('A1');\n    shouldThrowAnError(piece, -1);\n    shouldThrowAnError(piece, 2.5);\n    shouldThrowAnError(piece, 21);\n    shouldThrowAnError(piece, Math.PI);\n    shouldThrowAnError(piece, -Math.PI);\n    shouldThrowAnError(piece, Infinity);\n    shouldThrowAnError(piece, -Infinity);\n  });\n  describe('initiated with an invalid algebraic position', () => {\n    function shouldThrowAnError(algebraic) {\n      /**\n       * @test {Piece.validateAlgebraicNotation}\n       */\n      it(`should throw an error [${algebraic}]`, () => {\n        expect(() => new Piece(algebraic)).toThrowError(TypeError);\n      });\n    }\n\n    shouldThrowAnError('8h');\n    shouldThrowAnError([1, 1]);\n    shouldThrowAnError('invalid algebraic position');\n    shouldThrowAnError('i1');\n    shouldThrowAnError('h9');\n    shouldThrowAnError(8);\n    shouldThrowAnError({ column: 'A', row: 8 });\n  });\n\n  describe('initiated with a valid algebraic position', () => {\n    function shouldSetCorrectCoordinates(algebraic, expected) {\n      /**\n       * @test {Piece#coordinates}\n       * @test {Piece#algebraicPosition}\n       */\n      it(`should set correct coordinates [${algebraic} => ${expected}]`, () => {\n        const piece = new Piece(algebraic);\n        expect(piece.coordinates).toEqual(expected);\n        expect(piece.algebraicPosition).toEqual(algebraic.toLowerCase());\n      });\n    }\n\n    function shouldGetCorrectAlgebraic(expected, coordinates) {\n      /**\n       * @test {Piece.toAlgebraic}\n       */\n      it(`should get correct algebraic [${coordinates} => ${expected}]`, () => {\n        expect(Piece.toAlgebraic(coordinates))\n          .toEqual(expected.toLowerCase());\n      });\n    }\n\n    allPositions.forEach(testData => shouldSetCorrectCoordinates(...testData));\n    allPositions.forEach(testData => shouldGetCorrectAlgebraic(...testData));\n  });\n\n  describe('testing for legal positions', () => {\n    function shouldValidateLegalPosition(pos, expected) {\n      /**\n       * @test {Piece.isLegalPosition}\n       */\n      it(`should consider ${pos} ${expected ? 'legal' : 'ilegal'}`, () => {\n        expect(Piece.isLegalPosition(pos)).toEqual(expected);\n      });\n    }\n    const legalMoves = [];\n    for (let i = 1; i <= 8; i++) {\n      for (let j = 1; j <= 8; j++) {\n        legalMoves.push([i, j]);\n      }\n    }\n\n    legalMoves.forEach(pos => shouldValidateLegalPosition(pos, true));\n    shouldValidateLegalPosition([-1, 2], false);\n    shouldValidateLegalPosition([1, -2], false);\n    shouldValidateLegalPosition([10, 2], false);\n    shouldValidateLegalPosition([1, 20], false);\n    shouldValidateLegalPosition([-1, 20], false);\n    shouldValidateLegalPosition([-10, -2], false);\n    shouldValidateLegalPosition('wrong parameter', false);\n    shouldValidateLegalPosition({}, false);\n    shouldValidateLegalPosition(2, false);\n  });\n});\n",
    "static": true,
    "longname": "/home/martini/Projects/valid-chess-moves/tests/pieces/piece.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "test",
    "name": "describe28",
    "testId": 28,
    "memberof": "tests/pieces/piece.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/pieces/piece.test.js~describe28",
    "access": null,
    "description": "Given a Piece",
    "lineNumber": 7,
    "testTargets": [
      "Piece"
    ]
  },
  {
    "__docId__": 141,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "tests/pieces/piece.test.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "tests/pieces/piece.test.js~describe28.it29",
    "access": null,
    "description": "should have no rules",
    "lineNumber": 11,
    "testTargets": [
      "Piece#rules"
    ]
  },
  {
    "__docId__": 142,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "tests/pieces/piece.test.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "tests/pieces/piece.test.js~describe28.it30",
    "access": null,
    "description": "should not be able to move",
    "lineNumber": 19,
    "testTargets": [
      "Piece#possiblePositions"
    ]
  },
  {
    "__docId__": 143,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "tests/pieces/piece.test.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "tests/pieces/piece.test.js~describe28.it31",
    "access": null,
    "description": "next N moves should always return [] for N > 0",
    "lineNumber": 27,
    "testTargets": [
      "Piece#possiblePositionsInNMoves"
    ]
  },
  {
    "__docId__": 144,
    "kind": "test",
    "name": "describe32",
    "testId": 32,
    "memberof": "tests/pieces/piece.test.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "tests/pieces/piece.test.js~describe28.describe32",
    "access": null,
    "description": "next N moves should throw an error for invalid N",
    "lineNumber": 33
  },
  {
    "__docId__": 145,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "tests/pieces/piece.test.js~describe28.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "tests/pieces/piece.test.js~describe28.describe32.it33",
    "access": null,
    "lineNumber": 38,
    "testTargets": [
      "Piece#possiblePositionsInNMoves"
    ]
  },
  {
    "__docId__": 146,
    "kind": "test",
    "name": "describe34",
    "testId": 34,
    "memberof": "tests/pieces/piece.test.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "tests/pieces/piece.test.js~describe28.describe34",
    "access": null,
    "description": "initiated with an invalid algebraic position",
    "lineNumber": 53
  },
  {
    "__docId__": 147,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "tests/pieces/piece.test.js~describe28.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "tests/pieces/piece.test.js~describe28.describe34.it35",
    "access": null,
    "lineNumber": 58,
    "testTargets": [
      "Piece.validateAlgebraicNotation"
    ]
  },
  {
    "__docId__": 148,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "tests/pieces/piece.test.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "tests/pieces/piece.test.js~describe28.describe36",
    "access": null,
    "description": "initiated with a valid algebraic position",
    "lineNumber": 72
  },
  {
    "__docId__": 149,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "tests/pieces/piece.test.js~describe28.describe36",
    "testDepth": 2,
    "static": true,
    "longname": "tests/pieces/piece.test.js~describe28.describe36.it37",
    "access": null,
    "lineNumber": 78,
    "testTargets": [
      "Piece#coordinates",
      "Piece#algebraicPosition"
    ]
  },
  {
    "__docId__": 150,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "tests/pieces/piece.test.js~describe28.describe36",
    "testDepth": 2,
    "static": true,
    "longname": "tests/pieces/piece.test.js~describe28.describe36.it38",
    "access": null,
    "lineNumber": 89,
    "testTargets": [
      "Piece.toAlgebraic"
    ]
  },
  {
    "__docId__": 151,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "tests/pieces/piece.test.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "tests/pieces/piece.test.js~describe28.describe39",
    "access": null,
    "description": "testing for legal positions",
    "lineNumber": 99
  },
  {
    "__docId__": 152,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "tests/pieces/piece.test.js~describe28.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "tests/pieces/piece.test.js~describe28.describe39.it40",
    "access": null,
    "lineNumber": 104,
    "testTargets": [
      "Piece.isLegalPosition"
    ]
  }
]